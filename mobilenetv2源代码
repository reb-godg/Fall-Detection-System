import torch
import torch.nn as nn
import torch.nn.functional as F


class ConvBNReLU(nn.Sequential):
    def __init__(self, in_planes, out_planes, kernel_size=3, stride=1, groups=1):
        padding = (kernel_size - 1) // 2  # 计算padding大小，保持输出特征图大小不变
        super(ConvBNReLU, self).__init__(
            nn.Conv2d(in_planes, out_planes, kernel_size, stride, padding, groups=groups, bias=False),
            nn.BatchNorm2d(out_planes),
            nn.ReLU6(inplace=True)  # 使用ReLU6激活函数
        )


class InvertedResidual(nn.Module):
    def __init__(self, inp, oup, stride, expand_ratio):
        super(InvertedResidual, self).__init__()
        self.stride = stride
        assert stride in [1, 2]

        hidden_dim = round(inp * expand_ratio)  # 计算中间隐藏层的通道数

        self.use_res_connect = self.stride == 1 and inp == oup

        layers = []
        if expand_ratio != 1:
            # 扩张层，增加特征图的通道数
            layers.append(ConvBNReLU(inp, hidden_dim, kernel_size=1))
        layers.extend([
            # 建立深度可分离卷积层
            ConvBNReLU(hidden_dim, hidden_dim, stride=stride, groups=hidden_dim),
            nn.Conv2d(hidden_dim, oup, 1, 1, 0, bias=False),
            nn.BatchNorm2d(oup),
        ])
        self.conv = nn.Sequential(*layers)

    def forward(self, x):
        if self.use_res_connect:
            return x + self.conv(x)  # 残差连接
        else:
            return self.conv(x)


class MobileNetV2(nn.Module):
    def __init__(self, num_classes=1000, width_mult=1.0, inverted_residual_setting=None, round_nearest=8):
        super(MobileNetV2, self).__init__()
        block = InvertedResidual
        input_channel = 32
        last_channel = 1280

        if inverted_residual_setting is None:
            inverted_residual_setting = [
                # t: expansion factor, c: output channels, n: number of blocks, s: stride
                [1, 16, 1, 1],
                [6, 24, 2, 2],
                [6, 32, 3, 2],
                [6, 64, 4, 2],
                [6, 96, 3, 1],
                [6, 160, 3, 2],
                [6, 320, 1, 1],
            ]

        # 定义特征提取层
        features = [ConvBNReLU(3, input_channel, stride=2)]
        # 构建MobileNetV2网络的主体部分
        for t, c, n, s in inverted_residual_setting:
            oup = c  # 输出通道数
            for i in range(n):
                stride = s if i == 0 else 1  # 第一个block的步长为s，其余为1
                features.append(block(input_channel, oup, stride, expand_ratio=t))
                input_channel = oup

        features.append(ConvBNReLU(input_channel, last_channel, kernel_size=1))  # 输出通道数为last_channel
        self.features = nn.Sequential(*features)

        # 定义分类器
        self.classifier = nn.Sequential(
            nn.Dropout(0.2),
            nn.Linear(last_channel, num_classes),
        )

        self._initialize_weights()

    def forward(self, x):
        x = self.features(x)
        x = x.mean([2, 3])  # 平均池化
        x = self.classifier(x)
        return x

    def _initialize_weights(self):
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out')
                if m.bias is not None:
                    nn.init.zeros_(m.bias)
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.ones_(m.weight)
                nn.init.zeros_(m.bias)
            elif以下是MobileNetV2源代码的注释：

```python
import torch
import torch.nn as nn
import torch.nn.functional as F


class ConvBNReLU(nn.Sequential):
    def __init__(self, in_planes, out_planes, kernel_size=3, stride=1, groups=1):
        padding = (kernel_size - 1) // 2  # 计算padding大小，保持输出特征图大小不变
        super(ConvBNReLU, self).__init__(
            nn.Conv2d(in_planes, out_planes, kernel_size, stride, padding, groups=groups, bias=False),  # 卷积层
            nn.BatchNorm2d(out_planes),  # 批归一化
            nn.ReLU6(inplace=True)  # 使用ReLU6激活函数
        )


class InvertedResidual(nn.Module):
    def __init__(self, inp, oup, stride, expand_ratio):
        super(InvertedResidual, self).__init__()
        self.stride = stride
        assert stride in [1, 2]

        hidden_dim = round(inp * expand_ratio)  # 计算中间隐藏层的通道数

        self.use_res_connect = self.stride == 1 and inp == oup

        layers = []
        if expand_ratio != 1:
            # 扩张层，增加特征图的通道数
            layers.append(ConvBNReLU(inp, hidden_dim, kernel_size=1))
        layers.extend([
            # 建立深度可分离卷积层
            ConvBNReLU(hidden_dim, hidden_dim, stride=stride, groups=hidden_dim),
            nn.Conv2d(hidden_dim, oup, 1, 1, 0, bias=False),
            nn.BatchNorm2d(oup),
        ])
        self.conv = nn.Sequential(*layers)

    def forward(self, x):
        if self.use_res_connect:
            return x + self.conv(x)  # 残差连接
        else:
            return self.conv(x)


class MobileNetV2(nn.Module):
    def __init__(self, num_classes=1000, width_mult=1.0, inverted_residual_setting=None, round_nearest=8):
        super(MobileNetV2, self).__init__()
        block = InvertedResidual
        input_channel = 32
        last_channel = 1280

        if inverted_residual_setting is None:
            inverted_residual_setting = [
                # t: expansion factor, c: output channels, n: number of blocks, s: stride
                [1, 16, 1, 1],
                [6, 24, 2, 2],
                [6, 32, 3, 2],
                [6, 64, 4, 2],
                [6, 96, 3, 1],
                [6, 160, 3, 2],
                [6, 320, 1, 1],
            ]

        # 定义特征提取层
        features = [ConvBNReLU(3, input_channel, stride=2)]  # 输入通道数为3，输出通道数为input_channel，步长为2
        # 构建MobileNetV2网络的主体部分
        for t, c, n, s in inverted_residual_setting:
            oup = c  # 输出通道数
            for i in range(n):
                stride = s if i == 0 else 1  # 第一个block的步长为s，其余为1
                features.append(block(input_channel, oup, stride, expand_ratio=t))
                input_channel = oup

        features.append(ConvBNReLU(input_channel, last_channel, kernel_size=1))  # 输出通道数为last_channel
        self.features = nn.Sequential(*features)

        # 定义分类器
        self.classifier = nn.Sequential(
            nn.Dropout(0.2),
            nn.Linear(last_channel, num_classes),
        )

        self._initialize_weights()

    def forward(self, x):
        x = self.features(x)
        x = x.mean([2, 3])  # 平均池化
        x = self.classifier(x)
        return x

    def _initialize_weights(self):
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out')  # 卷积层权重初始化
                if m.bias is not None:
                    nn.init.zeros_(m.bias)  # 卷积层偏置初始化为0
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.ones_(m.weight)  # 批归一化层权重初始化为1
                nn.init.zeros_(m.bias)  # 批归一化层偏置初始化为0